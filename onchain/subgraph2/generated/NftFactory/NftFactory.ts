// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class NftCreated extends ethereum.Event {
  get params(): NftCreated__Params {
    return new NftCreated__Params(this);
  }
}

export class NftCreated__Params {
  _event: NftCreated;

  constructor(event: NftCreated) {
    this._event = event;
  }

  get nftAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NftFactory extends ethereum.SmartContract {
  static bind(address: Address): NftFactory {
    return new NftFactory("NftFactory", address);
  }

  deployNft(
    name: string,
    symbol: string,
    maxSupply: BigInt,
    mintPrice: BigInt,
    salt: Bytes,
  ): Address {
    let result = super.call(
      "deployNft",
      "deployNft(string,string,uint256,uint256,bytes32):(address)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromUnsignedBigInt(maxSupply),
        ethereum.Value.fromUnsignedBigInt(mintPrice),
        ethereum.Value.fromFixedBytes(salt),
      ],
    );

    return result[0].toAddress();
  }

  try_deployNft(
    name: string,
    symbol: string,
    maxSupply: BigInt,
    mintPrice: BigInt,
    salt: Bytes,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deployNft",
      "deployNft(string,string,uint256,uint256,bytes32):(address)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromUnsignedBigInt(maxSupply),
        ethereum.Value.fromUnsignedBigInt(mintPrice),
        ethereum.Value.fromFixedBytes(salt),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _implementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DeployNftCall extends ethereum.Call {
  get inputs(): DeployNftCall__Inputs {
    return new DeployNftCall__Inputs(this);
  }

  get outputs(): DeployNftCall__Outputs {
    return new DeployNftCall__Outputs(this);
  }
}

export class DeployNftCall__Inputs {
  _call: DeployNftCall;

  constructor(call: DeployNftCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get maxSupply(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get mintPrice(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get salt(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class DeployNftCall__Outputs {
  _call: DeployNftCall;

  constructor(call: DeployNftCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
