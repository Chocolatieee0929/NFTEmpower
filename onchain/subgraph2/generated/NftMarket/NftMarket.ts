// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class DeList extends ethereum.Event {
  get params(): DeList__Params {
    return new DeList__Params(this);
  }
}

export class DeList__Params {
  _event: DeList;

  constructor(event: DeList) {
    this._event = event;
  }

  get nftAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Listing extends ethereum.Event {
  get params(): Listing__Params {
    return new Listing__Params(this);
  }
}

export class Listing__Params {
  _event: Listing;

  constructor(event: Listing) {
    this._event = event;
  }

  get nftAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class NftMarket__nftsListedResult {
  value0: BigInt;
  value1: Address;
  value2: Address;

  constructor(value0: BigInt, value1: Address, value2: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    return map;
  }

  getPrice(): BigInt {
    return this.value0;
  }

  getSeller(): Address {
    return this.value1;
  }

  getErc20(): Address {
    return this.value2;
  }
}

export class NftMarket extends ethereum.SmartContract {
  static bind(address: Address): NftMarket {
    return new NftMarket("NftMarket", address);
  }

  isValidErc20(erc20: Address): boolean {
    let result = super.call("isValidErc20", "isValidErc20(address):(bool)", [
      ethereum.Value.fromAddress(erc20),
    ]);

    return result[0].toBoolean();
  }

  try_isValidErc20(erc20: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isValidErc20", "isValidErc20(address):(bool)", [
      ethereum.Value.fromAddress(erc20),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  nftsListed(param0: Address, param1: i32): NftMarket__nftsListedResult {
    let result = super.call(
      "nftsListed",
      "nftsListed(address,uint8):(uint256,address,address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param1)),
      ],
    );

    return new NftMarket__nftsListedResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toAddress(),
    );
  }

  try_nftsListed(
    param0: Address,
    param1: i32,
  ): ethereum.CallResult<NftMarket__nftsListedResult> {
    let result = super.tryCall(
      "nftsListed",
      "nftsListed(address,uint8):(uint256,address,address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param1)),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NftMarket__nftsListedResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toAddress(),
      ),
    );
  }

  recoverSig(
    seller: Address,
    tokenId: i32,
    price: BigInt,
    deadline: i32,
    v: i32,
    r: Bytes,
    s: Bytes,
  ): Address {
    let result = super.call(
      "recoverSig",
      "recoverSig(address,uint8,uint256,uint16,uint8,bytes32,bytes32):(address)",
      [
        ethereum.Value.fromAddress(seller),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tokenId)),
        ethereum.Value.fromUnsignedBigInt(price),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(deadline)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s),
      ],
    );

    return result[0].toAddress();
  }

  try_recoverSig(
    seller: Address,
    tokenId: i32,
    price: BigInt,
    deadline: i32,
    v: i32,
    r: Bytes,
    s: Bytes,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "recoverSig",
      "recoverSig(address,uint8,uint256,uint16,uint8,bytes32,bytes32):(address)",
      [
        ethereum.Value.fromAddress(seller),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tokenId)),
        ethereum.Value.fromUnsignedBigInt(price),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(deadline)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BuyNftCall extends ethereum.Call {
  get inputs(): BuyNftCall__Inputs {
    return new BuyNftCall__Inputs(this);
  }

  get outputs(): BuyNftCall__Outputs {
    return new BuyNftCall__Outputs(this);
  }
}

export class BuyNftCall__Inputs {
  _call: BuyNftCall;

  constructor(call: BuyNftCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class BuyNftCall__Outputs {
  _call: BuyNftCall;

  constructor(call: BuyNftCall) {
    this._call = call;
  }
}

export class DeListNFTCall extends ethereum.Call {
  get inputs(): DeListNFTCall__Inputs {
    return new DeListNFTCall__Inputs(this);
  }

  get outputs(): DeListNFTCall__Outputs {
    return new DeListNFTCall__Outputs(this);
  }
}

export class DeListNFTCall__Inputs {
  _call: DeListNFTCall;

  constructor(call: DeListNFTCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class DeListNFTCall__Outputs {
  _call: DeListNFTCall;

  constructor(call: DeListNFTCall) {
    this._call = call;
  }
}

export class ListNFTCall extends ethereum.Call {
  get inputs(): ListNFTCall__Inputs {
    return new ListNFTCall__Inputs(this);
  }

  get outputs(): ListNFTCall__Outputs {
    return new ListNFTCall__Outputs(this);
  }
}

export class ListNFTCall__Inputs {
  _call: ListNFTCall;

  constructor(call: ListNFTCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get erc20(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get price(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }
}

export class ListNFTCall__Outputs {
  _call: ListNFTCall;

  constructor(call: ListNFTCall) {
    this._call = call;
  }
}
